/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ScoredVector } from './ScoredVector';
import {
    ScoredVectorFromJSON,
    ScoredVectorFromJSONTyped,
    ScoredVectorToJSON,
} from './ScoredVector';
import type { SingleQueryResults } from './SingleQueryResults';
import {
    SingleQueryResultsFromJSON,
    SingleQueryResultsFromJSONTyped,
    SingleQueryResultsToJSON,
} from './SingleQueryResults';

/**
 * The response for the `Query` operation. These are the matches found for a particular query vector. The matches are ordered from most similar to least similar.
 * @export
 * @interface QueryResponse
 */
export interface QueryResponse {
    /**
     * DEPRECATED. The results of each query. The order is the same as `QueryRequest.queries`.
     * @type {Array<SingleQueryResults>}
     * @memberof QueryResponse
     * @deprecated
     */
    results?: Array<SingleQueryResults>;
    /**
     * The matches for the vectors.
     * @type {Array<ScoredVector>}
     * @memberof QueryResponse
     */
    matches?: Array<ScoredVector>;
    /**
     * The namespace for the vectors.
     * @type {string}
     * @memberof QueryResponse
     */
    namespace?: string;
}

/**
 * Check if a given object implements the QueryResponse interface.
 */
export function instanceOfQueryResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function QueryResponseFromJSON(json: any): QueryResponse {
    return QueryResponseFromJSONTyped(json, false);
}

export function QueryResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): QueryResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'results': !exists(json, 'results') ? undefined : ((json['results'] as Array<any>).map(SingleQueryResultsFromJSON)),
        'matches': !exists(json, 'matches') ? undefined : ((json['matches'] as Array<any>).map(ScoredVectorFromJSON)),
        'namespace': !exists(json, 'namespace') ? undefined : json['namespace'],
    };
}

export function QueryResponseToJSON(value?: QueryResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'results': value.results === undefined ? undefined : ((value.results as Array<any>).map(SingleQueryResultsToJSON)),
        'matches': value.matches === undefined ? undefined : ((value.matches as Array<any>).map(ScoredVectorToJSON)),
        'namespace': value.namespace,
    };
}

