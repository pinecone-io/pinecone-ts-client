/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SparseValues } from './SparseValues';
import {
    SparseValuesFromJSON,
    SparseValuesFromJSONTyped,
    SparseValuesToJSON,
} from './SparseValues';

/**
 * The request for the `Upsert` operation.
 * @export
 * @interface UpdateRequest
 */
export interface UpdateRequest {
    /**
     * Vector's unique id.
     * @type {string}
     * @memberof UpdateRequest
     */
    id: string;
    /**
     * Vector data.
     * @type {Array<number>}
     * @memberof UpdateRequest
     */
    values?: Array<number>;
    /**
     * 
     * @type {SparseValues}
     * @memberof UpdateRequest
     */
    sparseValues?: SparseValues;
    /**
     * Metadata to *set* for the vector.
     * @type {object}
     * @memberof UpdateRequest
     */
    setMetadata?: object;
    /**
     * Namespace name where to update the vector.
     * @type {string}
     * @memberof UpdateRequest
     */
    namespace?: string;
}

/**
 * Check if a given object implements the UpdateRequest interface.
 */
export function instanceOfUpdateRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function UpdateRequestFromJSON(json: any): UpdateRequest {
    return UpdateRequestFromJSONTyped(json, false);
}

export function UpdateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'values': !exists(json, 'values') ? undefined : json['values'],
        'sparseValues': !exists(json, 'sparseValues') ? undefined : SparseValuesFromJSON(json['sparseValues']),
        'setMetadata': !exists(json, 'setMetadata') ? undefined : json['setMetadata'],
        'namespace': !exists(json, 'namespace') ? undefined : json['namespace'],
    };
}

export function UpdateRequestToJSON(value?: UpdateRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'values': value.values,
        'sparseValues': SparseValuesToJSON(value.sparseValues),
        'setMetadata': value.setMetadata,
        'namespace': value.namespace,
    };
}

