/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Control Plane API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: 2025-04
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BackupModel } from './BackupModel';
import {
    BackupModelFromJSON,
    BackupModelFromJSONTyped,
    BackupModelToJSON,
} from './BackupModel';
import type { PaginationResponse } from './PaginationResponse';
import {
    PaginationResponseFromJSON,
    PaginationResponseFromJSONTyped,
    PaginationResponseToJSON,
} from './PaginationResponse';

/**
 * The list of backups that exist in the project.
 * @export
 * @interface BackupList
 */
export interface BackupList {
    /**
     * 
     * @type {Array<BackupModel>}
     * @memberof BackupList
     */
    data?: Array<BackupModel>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof BackupList
     */
    pagination?: PaginationResponse;
}

/**
 * Check if a given object implements the BackupList interface.
 */
export function instanceOfBackupList(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BackupListFromJSON(json: any): BackupList {
    return BackupListFromJSONTyped(json, false);
}

export function BackupListFromJSONTyped(json: any, ignoreDiscriminator: boolean): BackupList {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'data': !exists(json, 'data') ? undefined : ((json['data'] as Array<any>).map(BackupModelFromJSON)),
        'pagination': !exists(json, 'pagination') ? undefined : PaginationResponseFromJSON(json['pagination']),
    };
}

export function BackupListToJSON(value?: BackupList | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'data': value.data === undefined ? undefined : ((value.data as Array<any>).map(BackupModelToJSON)),
        'pagination': PaginationResponseToJSON(value.pagination),
    };
}

