/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Control Plane API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: 2025-04
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The BackupModel describes the configuration and status of a Pinecone backup.
 * @export
 * @interface BackupModel
 */
export interface BackupModel {
    /**
     * Unique identifier for the backup.
     * @type {string}
     * @memberof BackupModel
     */
    backupId: string;
    /**
     * Name of the index from which the backup was taken.
     * @type {string}
     * @memberof BackupModel
     */
    sourceIndexName: string;
    /**
     * ID of the index.
     * @type {string}
     * @memberof BackupModel
     */
    sourceIndexId: string;
    /**
     * Optional user-defined name for the backup.
     * @type {string}
     * @memberof BackupModel
     */
    name?: string;
    /**
     * Optional description providing context for the backup.
     * @type {string}
     * @memberof BackupModel
     */
    description?: string;
    /**
     * Current status of the backup (e.g., Initializing, Ready, Failed).
     * @type {string}
     * @memberof BackupModel
     */
    status: string;
    /**
     * Cloud provider where the backup is stored.
     * @type {string}
     * @memberof BackupModel
     */
    cloud: string;
    /**
     * Cloud region where the backup is stored.
     * @type {string}
     * @memberof BackupModel
     */
    region: string;
    /**
     * The dimensions of the vectors to be inserted in the index.
     * @type {number}
     * @memberof BackupModel
     */
    dimension?: number;
    /**
     * The distance metric to be used for similarity search. You can use 'euclidean', 'cosine', or 'dotproduct'. If the 'vector_type' is 'sparse', the metric must be 'dotproduct'. If the `vector_type` is `dense`, the metric defaults to 'cosine'.
     * @type {string}
     * @memberof BackupModel
     */
    metric?: BackupModelMetricEnum;
    /**
     * Total number of records in the backup.
     * @type {number}
     * @memberof BackupModel
     */
    recordCount?: number;
    /**
     * Number of namespaces in the backup.
     * @type {number}
     * @memberof BackupModel
     */
    namespaceCount?: number;
    /**
     * Size of the backup in bytes.
     * @type {number}
     * @memberof BackupModel
     */
    sizeBytes?: number;
    /**
     * Custom user tags added to an index. Keys must be 80 characters or less. Values must be 120 characters or less. Keys must be alphanumeric, '_', or '-'.  Values must be alphanumeric, ';', '@', '_', '-', '.', '+', or ' '. To unset a key, set the value to be an empty string.
     * @type {{ [key: string]: string; }}
     * @memberof BackupModel
     */
    tags?: { [key: string]: string; };
    /**
     * Timestamp when the backup was created.
     * @type {string}
     * @memberof BackupModel
     */
    createdAt?: string;
}


/**
 * @export
 */
export const BackupModelMetricEnum = {
    Cosine: 'cosine',
    Euclidean: 'euclidean',
    Dotproduct: 'dotproduct'
} as const;
export type BackupModelMetricEnum = typeof BackupModelMetricEnum[keyof typeof BackupModelMetricEnum];


/**
 * Check if a given object implements the BackupModel interface.
 */
export function instanceOfBackupModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "backupId" in value;
    isInstance = isInstance && "sourceIndexName" in value;
    isInstance = isInstance && "sourceIndexId" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "cloud" in value;
    isInstance = isInstance && "region" in value;

    return isInstance;
}

export function BackupModelFromJSON(json: any): BackupModel {
    return BackupModelFromJSONTyped(json, false);
}

export function BackupModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): BackupModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'backupId': json['backup_id'],
        'sourceIndexName': json['source_index_name'],
        'sourceIndexId': json['source_index_id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'status': json['status'],
        'cloud': json['cloud'],
        'region': json['region'],
        'dimension': !exists(json, 'dimension') ? undefined : json['dimension'],
        'metric': !exists(json, 'metric') ? undefined : json['metric'],
        'recordCount': !exists(json, 'record_count') ? undefined : json['record_count'],
        'namespaceCount': !exists(json, 'namespace_count') ? undefined : json['namespace_count'],
        'sizeBytes': !exists(json, 'size_bytes') ? undefined : json['size_bytes'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'createdAt': !exists(json, 'created_at') ? undefined : json['created_at'],
    };
}

export function BackupModelToJSON(value?: BackupModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'backup_id': value.backupId,
        'source_index_name': value.sourceIndexName,
        'source_index_id': value.sourceIndexId,
        'name': value.name,
        'description': value.description,
        'status': value.status,
        'cloud': value.cloud,
        'region': value.region,
        'dimension': value.dimension,
        'metric': value.metric,
        'record_count': value.recordCount,
        'namespace_count': value.namespaceCount,
        'size_bytes': value.sizeBytes,
        'tags': value.tags,
        'created_at': value.createdAt,
    };
}

