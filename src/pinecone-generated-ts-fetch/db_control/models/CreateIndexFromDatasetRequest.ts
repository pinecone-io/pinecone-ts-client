/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Control Plane API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: unstable
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CreateIndexFromDatasetRequestSpec } from './CreateIndexFromDatasetRequestSpec';
import {
    CreateIndexFromDatasetRequestSpecFromJSON,
    CreateIndexFromDatasetRequestSpecFromJSONTyped,
    CreateIndexFromDatasetRequestSpecToJSON,
} from './CreateIndexFromDatasetRequestSpec';

/**
 * The configuration needed to create a Pinecone index from a dataset.
 * @export
 * @interface CreateIndexFromDatasetRequest
 */
export interface CreateIndexFromDatasetRequest {
    /**
     * The name of the index. Resource name must be 1-45 characters long, start and end with an alphanumeric character, and consist only of lower case alphanumeric characters or '-'.
     * @type {string}
     * @memberof CreateIndexFromDatasetRequest
     */
    name: string;
    /**
     * The dimensions of the vectors to be inserted in the index.
     * @type {number}
     * @memberof CreateIndexFromDatasetRequest
     */
    dimension: number;
    /**
     * The distance metric to be used for similarity search. You can use 'euclidean', 'cosine', or 'dotproduct'. If the 'vector_type' is 'sparse', the metric must be 'dotproduct'. If the `vector_type` is `dense`, the metric defaults to 'cosine'.
     * @type {string}
     * @memberof CreateIndexFromDatasetRequest
     */
    metric?: CreateIndexFromDatasetRequestMetricEnum;
    /**
     * The name of the dataset to create the index from. This must correlate to the collection name.
     * @type {string}
     * @memberof CreateIndexFromDatasetRequest
     */
    datasetName?: string;
    /**
     * 
     * @type {CreateIndexFromDatasetRequestSpec}
     * @memberof CreateIndexFromDatasetRequest
     */
    spec: CreateIndexFromDatasetRequestSpec | null;
}


/**
 * @export
 */
export const CreateIndexFromDatasetRequestMetricEnum = {
    Cosine: 'cosine',
    Euclidean: 'euclidean',
    Dotproduct: 'dotproduct'
} as const;
export type CreateIndexFromDatasetRequestMetricEnum = typeof CreateIndexFromDatasetRequestMetricEnum[keyof typeof CreateIndexFromDatasetRequestMetricEnum];


/**
 * Check if a given object implements the CreateIndexFromDatasetRequest interface.
 */
export function instanceOfCreateIndexFromDatasetRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "dimension" in value;
    isInstance = isInstance && "spec" in value;

    return isInstance;
}

export function CreateIndexFromDatasetRequestFromJSON(json: any): CreateIndexFromDatasetRequest {
    return CreateIndexFromDatasetRequestFromJSONTyped(json, false);
}

export function CreateIndexFromDatasetRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateIndexFromDatasetRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'dimension': json['dimension'],
        'metric': !exists(json, 'metric') ? undefined : json['metric'],
        'datasetName': !exists(json, 'dataset_name') ? undefined : json['dataset_name'],
        'spec': CreateIndexFromDatasetRequestSpecFromJSON(json['spec']),
    };
}

export function CreateIndexFromDatasetRequestToJSON(value?: CreateIndexFromDatasetRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'dimension': value.dimension,
        'metric': value.metric,
        'dataset_name': value.datasetName,
        'spec': CreateIndexFromDatasetRequestSpecToJSON(value.spec),
    };
}

