/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Control Plane API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: 2025-04
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The RestoreJobModel describes the status of a restore job.
 * @export
 * @interface RestoreJobModel
 */
export interface RestoreJobModel {
    /**
     * Unique identifier for the restore job
     * @type {string}
     * @memberof RestoreJobModel
     */
    restoreJobId: string;
    /**
     * Backup used for the restore
     * @type {string}
     * @memberof RestoreJobModel
     */
    backupId: string;
    /**
     * Name of the index into which data is being restored
     * @type {string}
     * @memberof RestoreJobModel
     */
    targetIndexName: string;
    /**
     * ID of the index
     * @type {string}
     * @memberof RestoreJobModel
     */
    targetIndexId: string;
    /**
     * Status of the restore job
     * @type {string}
     * @memberof RestoreJobModel
     */
    status: string;
    /**
     * Timestamp when the restore job started
     * @type {Date}
     * @memberof RestoreJobModel
     */
    createdAt: Date;
    /**
     * Timestamp when the restore job finished
     * @type {Date}
     * @memberof RestoreJobModel
     */
    completedAt?: Date;
    /**
     * The progress made by the restore job out of 100
     * @type {number}
     * @memberof RestoreJobModel
     */
    percentComplete?: number;
}

/**
 * Check if a given object implements the RestoreJobModel interface.
 */
export function instanceOfRestoreJobModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "restoreJobId" in value;
    isInstance = isInstance && "backupId" in value;
    isInstance = isInstance && "targetIndexName" in value;
    isInstance = isInstance && "targetIndexId" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "createdAt" in value;

    return isInstance;
}

export function RestoreJobModelFromJSON(json: any): RestoreJobModel {
    return RestoreJobModelFromJSONTyped(json, false);
}

export function RestoreJobModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): RestoreJobModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'restoreJobId': json['restore_job_id'],
        'backupId': json['backup_id'],
        'targetIndexName': json['target_index_name'],
        'targetIndexId': json['target_index_id'],
        'status': json['status'],
        'createdAt': (new Date(json['created_at'])),
        'completedAt': !exists(json, 'completed_at') ? undefined : (new Date(json['completed_at'])),
        'percentComplete': !exists(json, 'percent_complete') ? undefined : json['percent_complete'],
    };
}

export function RestoreJobModelToJSON(value?: RestoreJobModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'restore_job_id': value.restoreJobId,
        'backup_id': value.backupId,
        'target_index_name': value.targetIndexName,
        'target_index_id': value.targetIndexId,
        'status': value.status,
        'created_at': (value.createdAt.toISOString()),
        'completed_at': value.completedAt === undefined ? undefined : (value.completedAt.toISOString()),
        'percent_complete': value.percentComplete,
    };
}

