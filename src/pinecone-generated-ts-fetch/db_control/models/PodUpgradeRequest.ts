/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Control Plane API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: unstable
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PodUpgradeTarget } from './PodUpgradeTarget';
import {
    PodUpgradeTargetFromJSON,
    PodUpgradeTargetFromJSONTyped,
    PodUpgradeTargetToJSON,
} from './PodUpgradeTarget';

/**
 * The configuration needed to upgrade an index.
 * @export
 * @interface PodUpgradeRequest
 */
export interface PodUpgradeRequest {
    /**
     * The name of the index. Resource name must be 1-45 characters long, start and end with an alphanumeric character, and consist only of lower case alphanumeric characters or '-'.
     * @type {string}
     * @memberof PodUpgradeRequest
     */
    indexName: string;
    /**
     * The name of the index. Resource name must be 1-45 characters long, start and end with an alphanumeric character, and consist only of lower case alphanumeric characters or '-'.
     * @type {string}
     * @memberof PodUpgradeRequest
     */
    targetName: string;
    /**
     * 
     * @type {PodUpgradeTarget}
     * @memberof PodUpgradeRequest
     */
    target: PodUpgradeTarget;
}

/**
 * Check if a given object implements the PodUpgradeRequest interface.
 */
export function instanceOfPodUpgradeRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "indexName" in value;
    isInstance = isInstance && "targetName" in value;
    isInstance = isInstance && "target" in value;

    return isInstance;
}

export function PodUpgradeRequestFromJSON(json: any): PodUpgradeRequest {
    return PodUpgradeRequestFromJSONTyped(json, false);
}

export function PodUpgradeRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PodUpgradeRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'indexName': json['index_name'],
        'targetName': json['target_name'],
        'target': PodUpgradeTargetFromJSON(json['target']),
    };
}

export function PodUpgradeRequestToJSON(value?: PodUpgradeRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'index_name': value.indexName,
        'target_name': value.targetName,
        'target': PodUpgradeTargetToJSON(value.target),
    };
}

