/* tslint:disable */
/* eslint-disable */
/**
 * Evaluation API
 * Provides endpoints for evaluating RAG systems using various metrics.
 *
 * The version of the OpenAPI document: 2025-01
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Metrics } from './Metrics';
import {
    MetricsFromJSON,
    MetricsFromJSONTyped,
    MetricsToJSON,
} from './Metrics';
import type { Reasoning } from './Reasoning';
import {
    ReasoningFromJSON,
    ReasoningFromJSONTyped,
    ReasoningToJSON,
} from './Reasoning';
import type { TokenCounts } from './TokenCounts';
import {
    TokenCountsFromJSON,
    TokenCountsFromJSONTyped,
    TokenCountsToJSON,
} from './TokenCounts';

/**
 * The response for the alignment evaluation.
 * @export
 * @interface AlignmentResponse
 */
export interface AlignmentResponse {
    /**
     * 
     * @type {Metrics}
     * @memberof AlignmentResponse
     */
    metrics: Metrics;
    /**
     * 
     * @type {Reasoning}
     * @memberof AlignmentResponse
     */
    reasoning: Reasoning;
    /**
     * 
     * @type {TokenCounts}
     * @memberof AlignmentResponse
     */
    usage: TokenCounts;
}

/**
 * Check if a given object implements the AlignmentResponse interface.
 */
export function instanceOfAlignmentResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "metrics" in value;
    isInstance = isInstance && "reasoning" in value;
    isInstance = isInstance && "usage" in value;

    return isInstance;
}

export function AlignmentResponseFromJSON(json: any): AlignmentResponse {
    return AlignmentResponseFromJSONTyped(json, false);
}

export function AlignmentResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): AlignmentResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'metrics': MetricsFromJSON(json['metrics']),
        'reasoning': ReasoningFromJSON(json['reasoning']),
        'usage': TokenCountsFromJSON(json['usage']),
    };
}

export function AlignmentResponseToJSON(value?: AlignmentResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'metrics': MetricsToJSON(value.metrics),
        'reasoning': ReasoningToJSON(value.reasoning),
        'usage': TokenCountsToJSON(value.usage),
    };
}

