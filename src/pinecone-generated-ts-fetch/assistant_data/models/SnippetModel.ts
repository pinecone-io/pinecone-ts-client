/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone AssistantCtrlPlane Engine API
 * Pinecone AssistantCtrlPlane Engine is a context engine to store and retrieve relevant knowledge from millions of documents at scale. This API supports interactions with assistants.
 *
 * The version of the OpenAPI document: v1alpha
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The snippet represents a part of a document that is relevant to the user query.
 * @export
 * @interface SnippetModel
 */
export interface SnippetModel {
    /**
     * 
     * @type {string}
     * @memberof SnippetModel
     */
    type?: SnippetModelTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SnippetModel
     */
    content: string;
    /**
     * 
     * @type {number}
     * @memberof SnippetModel
     */
    score: number;
    /**
     * Represents a reference for the information provided.
     * @type {object}
     * @memberof SnippetModel
     */
    reference: object;
}


/**
 * @export
 */
export const SnippetModelTypeEnum = {
    Text: 'text'
} as const;
export type SnippetModelTypeEnum = typeof SnippetModelTypeEnum[keyof typeof SnippetModelTypeEnum];


/**
 * Check if a given object implements the SnippetModel interface.
 */
export function instanceOfSnippetModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "content" in value;
    isInstance = isInstance && "score" in value;
    isInstance = isInstance && "reference" in value;

    return isInstance;
}

export function SnippetModelFromJSON(json: any): SnippetModel {
    return SnippetModelFromJSONTyped(json, false);
}

export function SnippetModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): SnippetModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'content': json['content'],
        'score': json['score'],
        'reference': json['reference'],
    };
}

export function SnippetModelToJSON(value?: SnippetModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'content': value.content,
        'score': value.score,
        'reference': value.reference,
    };
}

