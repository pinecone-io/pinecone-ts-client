/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Assistant Data Plane API
 * Pinecone Assistant Engine is a context engine to store and retrieve relevant knowledge from millions of documents at scale. This API supports interactions with assistants.
 *
 * The version of the OpenAPI document: 2025-04
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChatCompletionAssistant200ResponseChoicesInner } from './ChatCompletionAssistant200ResponseChoicesInner';
import {
    ChatCompletionAssistant200ResponseChoicesInnerFromJSON,
    ChatCompletionAssistant200ResponseChoicesInnerFromJSONTyped,
    ChatCompletionAssistant200ResponseChoicesInnerToJSON,
} from './ChatCompletionAssistant200ResponseChoicesInner';

/**
 * The ChatCompletionModel describes the response format of a chat request.
 * @export
 * @interface ChatCompletionAssistant200Response
 */
export interface ChatCompletionAssistant200Response {
    /**
     * 
     * @type {string}
     * @memberof ChatCompletionAssistant200Response
     */
    id?: string;
    /**
     * 
     * @type {Array<ChatCompletionAssistant200ResponseChoicesInner>}
     * @memberof ChatCompletionAssistant200Response
     */
    choices?: Array<ChatCompletionAssistant200ResponseChoicesInner>;
    /**
     * 
     * @type {string}
     * @memberof ChatCompletionAssistant200Response
     */
    model?: string;
}

/**
 * Check if a given object implements the ChatCompletionAssistant200Response interface.
 */
export function instanceOfChatCompletionAssistant200Response(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChatCompletionAssistant200ResponseFromJSON(json: any): ChatCompletionAssistant200Response {
    return ChatCompletionAssistant200ResponseFromJSONTyped(json, false);
}

export function ChatCompletionAssistant200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChatCompletionAssistant200Response {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'choices': !exists(json, 'choices') ? undefined : ((json['choices'] as Array<any>).map(ChatCompletionAssistant200ResponseChoicesInnerFromJSON)),
        'model': !exists(json, 'model') ? undefined : json['model'],
    };
}

export function ChatCompletionAssistant200ResponseToJSON(value?: ChatCompletionAssistant200Response | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'choices': value.choices === undefined ? undefined : ((value.choices as Array<any>).map(ChatCompletionAssistant200ResponseChoicesInnerToJSON)),
        'model': value.model,
    };
}

