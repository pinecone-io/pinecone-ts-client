/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Assistant Data Plane API
 * Pinecone Assistant Engine is a context engine to store and retrieve relevant knowledge from millions of documents at scale. This API supports interactions with assistants.
 *
 * The version of the OpenAPI document: 2025-01
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChoiceModel } from './ChoiceModel';
import {
    ChoiceModelFromJSON,
    ChoiceModelFromJSONTyped,
    ChoiceModelToJSON,
} from './ChoiceModel';
import type { UsageModel } from './UsageModel';
import {
    UsageModelFromJSON,
    UsageModelFromJSONTyped,
    UsageModelToJSON,
} from './UsageModel';

/**
 * The ChatCompletionModel describes the response format of a chat request.
 * @export
 * @interface ChatCompletionModel
 */
export interface ChatCompletionModel {
    /**
     * 
     * @type {string}
     * @memberof ChatCompletionModel
     */
    id?: string;
    /**
     * 
     * @type {Array<ChoiceModel>}
     * @memberof ChatCompletionModel
     */
    choices?: Array<ChoiceModel>;
    /**
     * 
     * @type {string}
     * @memberof ChatCompletionModel
     */
    model?: string;
    /**
     * 
     * @type {UsageModel}
     * @memberof ChatCompletionModel
     */
    usage?: UsageModel;
}

/**
 * Check if a given object implements the ChatCompletionModel interface.
 */
export function instanceOfChatCompletionModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChatCompletionModelFromJSON(json: any): ChatCompletionModel {
    return ChatCompletionModelFromJSONTyped(json, false);
}

export function ChatCompletionModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChatCompletionModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'choices': !exists(json, 'choices') ? undefined : ((json['choices'] as Array<any>).map(ChoiceModelFromJSON)),
        'model': !exists(json, 'model') ? undefined : json['model'],
        'usage': !exists(json, 'usage') ? undefined : UsageModelFromJSON(json['usage']),
    };
}

export function ChatCompletionModelToJSON(value?: ChatCompletionModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'choices': value.choices === undefined ? undefined : ((value.choices as Array<any>).map(ChoiceModelToJSON)),
        'model': value.model,
        'usage': UsageModelToJSON(value.usage),
    };
}

