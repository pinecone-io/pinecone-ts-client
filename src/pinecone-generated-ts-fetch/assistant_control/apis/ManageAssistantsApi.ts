/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Assistant Control Plane API
 * Pinecone Assistant Engine is a context engine to store and retrieve relevant knowledge  from millions of documents at scale. This API supports creating and managing assistants. 
 *
 * The version of the OpenAPI document: 2025-04
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Assistant,
  CreateAssistantRequest,
  ErrorResponse,
  ListAssistants200Response,
  UpdateAssistant200Response,
  UpdateAssistantRequest,
} from '../models/index';
import {
    AssistantFromJSON,
    AssistantToJSON,
    CreateAssistantRequestFromJSON,
    CreateAssistantRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ListAssistants200ResponseFromJSON,
    ListAssistants200ResponseToJSON,
    UpdateAssistant200ResponseFromJSON,
    UpdateAssistant200ResponseToJSON,
    UpdateAssistantRequestFromJSON,
    UpdateAssistantRequestToJSON,
} from '../models/index';

export interface CreateAssistantOperationRequest {
    createAssistantRequest: CreateAssistantRequest;
}

export interface DeleteAssistantRequest {
    assistantName: string;
}

export interface GetAssistantRequest {
    assistantName: string;
}

export interface UpdateAssistantOperationRequest {
    assistantName: string;
    updateAssistantRequest: UpdateAssistantRequest;
}

/**
 * 
 */
export class ManageAssistantsApi extends runtime.BaseAPI {

    /**
     * Create an assistant. This is where you specify the underlying training model, which cloud provider you would like to deploy with, and more.  For guidance and examples, see [Create an assistant](https://docs.pinecone.io/guides/assistant/create-assistant)
     * Create an assistant
     */
    async createAssistantRaw(requestParameters: CreateAssistantOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Assistant>> {
        if (requestParameters.createAssistantRequest === null || requestParameters.createAssistantRequest === undefined) {
            throw new runtime.RequiredError('createAssistantRequest','Required parameter requestParameters.createAssistantRequest was null or undefined when calling createAssistant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/assistants`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAssistantRequestToJSON(requestParameters.createAssistantRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssistantFromJSON(jsonValue));
    }

    /**
     * Create an assistant. This is where you specify the underlying training model, which cloud provider you would like to deploy with, and more.  For guidance and examples, see [Create an assistant](https://docs.pinecone.io/guides/assistant/create-assistant)
     * Create an assistant
     */
    async createAssistant(requestParameters: CreateAssistantOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Assistant> {
        const response = await this.createAssistantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing assistant.  For guidance and examples, see [Manage assistants](https://docs.pinecone.io/guides/assistant/manage-assistants#delete-an-assistant)
     * Delete an assistant
     */
    async deleteAssistantRaw(requestParameters: DeleteAssistantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.assistantName === null || requestParameters.assistantName === undefined) {
            throw new runtime.RequiredError('assistantName','Required parameter requestParameters.assistantName was null or undefined when calling deleteAssistant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/assistants/{assistant_name}`.replace(`{${"assistant_name"}}`, encodeURIComponent(String(requestParameters.assistantName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an existing assistant.  For guidance and examples, see [Manage assistants](https://docs.pinecone.io/guides/assistant/manage-assistants#delete-an-assistant)
     * Delete an assistant
     */
    async deleteAssistant(requestParameters: DeleteAssistantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAssistantRaw(requestParameters, initOverrides);
    }

    /**
     * Get the status of an assistant.  For guidance and examples, see [Manage assistants](https://docs.pinecone.io/guides/assistant/manage-assistants#get-the-status-of-an-assistant)
     * Check assistant status
     */
    async getAssistantRaw(requestParameters: GetAssistantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Assistant>> {
        if (requestParameters.assistantName === null || requestParameters.assistantName === undefined) {
            throw new runtime.RequiredError('assistantName','Required parameter requestParameters.assistantName was null or undefined when calling getAssistant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/assistants/{assistant_name}`.replace(`{${"assistant_name"}}`, encodeURIComponent(String(requestParameters.assistantName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssistantFromJSON(jsonValue));
    }

    /**
     * Get the status of an assistant.  For guidance and examples, see [Manage assistants](https://docs.pinecone.io/guides/assistant/manage-assistants#get-the-status-of-an-assistant)
     * Check assistant status
     */
    async getAssistant(requestParameters: GetAssistantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Assistant> {
        const response = await this.getAssistantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of all assistants in a project.  For guidance and examples, see [Manage assistants](https://docs.pinecone.io/guides/assistant/manage-assistants#list-assistants-for-a-project).
     * List assistants
     */
    async listAssistantsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListAssistants200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/assistants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListAssistants200ResponseFromJSON(jsonValue));
    }

    /**
     * List of all assistants in a project.  For guidance and examples, see [Manage assistants](https://docs.pinecone.io/guides/assistant/manage-assistants#list-assistants-for-a-project).
     * List assistants
     */
    async listAssistants(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListAssistants200Response> {
        const response = await this.listAssistantsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update an existing assistant. You can modify the assistant\'s instructions.  For guidance and examples, see [Manage assistants](https://docs.pinecone.io/guides/assistant/manage-assistants#add-instructions-to-an-assistant).
     * Update an assistant
     */
    async updateAssistantRaw(requestParameters: UpdateAssistantOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateAssistant200Response>> {
        if (requestParameters.assistantName === null || requestParameters.assistantName === undefined) {
            throw new runtime.RequiredError('assistantName','Required parameter requestParameters.assistantName was null or undefined when calling updateAssistant.');
        }

        if (requestParameters.updateAssistantRequest === null || requestParameters.updateAssistantRequest === undefined) {
            throw new runtime.RequiredError('updateAssistantRequest','Required parameter requestParameters.updateAssistantRequest was null or undefined when calling updateAssistant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/assistants/{assistant_name}`.replace(`{${"assistant_name"}}`, encodeURIComponent(String(requestParameters.assistantName))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAssistantRequestToJSON(requestParameters.updateAssistantRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateAssistant200ResponseFromJSON(jsonValue));
    }

    /**
     * Update an existing assistant. You can modify the assistant\'s instructions.  For guidance and examples, see [Manage assistants](https://docs.pinecone.io/guides/assistant/manage-assistants#add-instructions-to-an-assistant).
     * Update an assistant
     */
    async updateAssistant(requestParameters: UpdateAssistantOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateAssistant200Response> {
        const response = await this.updateAssistantRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
