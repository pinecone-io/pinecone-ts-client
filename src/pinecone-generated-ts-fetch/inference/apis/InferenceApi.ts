/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Inference API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: 2024-10
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Embed400Response,
  EmbedRequest,
  EmbeddingsList,
  Rerank200Response,
  RerankRequest,
} from '../models/index';
import {
    Embed400ResponseFromJSON,
    Embed400ResponseToJSON,
    EmbedRequestFromJSON,
    EmbedRequestToJSON,
    EmbeddingsListFromJSON,
    EmbeddingsListToJSON,
    Rerank200ResponseFromJSON,
    Rerank200ResponseToJSON,
    RerankRequestFromJSON,
    RerankRequestToJSON,
} from '../models/index';

export interface EmbedOperationRequest {
    embedRequest?: EmbedRequest;
}

export interface RerankOperationRequest {
    rerankRequest?: RerankRequest;
}

/**
 * 
 */
export class InferenceApi extends runtime.BaseAPI {

    /**
     * Generate embeddings for input data
     * Embed data
     */
    async embedRaw(requestParameters: EmbedOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmbeddingsList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/embed`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmbedRequestToJSON(requestParameters.embedRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmbeddingsListFromJSON(jsonValue));
    }

    /**
     * Generate embeddings for input data
     * Embed data
     */
    async embed(requestParameters: EmbedOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmbeddingsList> {
        const response = await this.embedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Using a reranker to rerank a list of items for a query
     * Rerank items
     */
    async rerankRaw(requestParameters: RerankOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rerank200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/rerank`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RerankRequestToJSON(requestParameters.rerankRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Rerank200ResponseFromJSON(jsonValue));
    }

    /**
     * Using a reranker to rerank a list of items for a query
     * Rerank items
     */
    async rerank(requestParameters: RerankOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rerank200Response> {
        const response = await this.rerankRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
