/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Inference API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: 2025-04
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ModelInfo } from './ModelInfo';
import {
    ModelInfoFromJSON,
    ModelInfoFromJSONTyped,
    ModelInfoToJSON,
} from './ModelInfo';

/**
 * The list of available models.
 * @export
 * @interface ModelInfoList
 */
export interface ModelInfoList {
    /**
     * 
     * @type {Array<ModelInfo>}
     * @memberof ModelInfoList
     */
    models?: Array<ModelInfo>;
}

/**
 * Check if a given object implements the ModelInfoList interface.
 */
export function instanceOfModelInfoList(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ModelInfoListFromJSON(json: any): ModelInfoList {
    return ModelInfoListFromJSONTyped(json, false);
}

export function ModelInfoListFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelInfoList {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'models': !exists(json, 'models') ? undefined : ((json['models'] as Array<any>).map(ModelInfoFromJSON)),
    };
}

export function ModelInfoListToJSON(value?: ModelInfoList | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'models': value.models === undefined ? undefined : ((value.models as Array<any>).map(ModelInfoToJSON)),
    };
}

