/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Inference API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: 2025-04
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ModelInfoSupportedParameterAllowedValuesInner } from './ModelInfoSupportedParameterAllowedValuesInner';
import {
    ModelInfoSupportedParameterAllowedValuesInnerFromJSON,
    ModelInfoSupportedParameterAllowedValuesInnerFromJSONTyped,
    ModelInfoSupportedParameterAllowedValuesInnerToJSON,
} from './ModelInfoSupportedParameterAllowedValuesInner';
import type { ModelInfoSupportedParameterDefault } from './ModelInfoSupportedParameterDefault';
import {
    ModelInfoSupportedParameterDefaultFromJSON,
    ModelInfoSupportedParameterDefaultFromJSONTyped,
    ModelInfoSupportedParameterDefaultToJSON,
} from './ModelInfoSupportedParameterDefault';

/**
 * Describes a parameter supported by the model, including parameter value constraints.
 * @export
 * @interface ModelInfoSupportedParameter
 */
export interface ModelInfoSupportedParameter {
    /**
     * The name of the parameter.
     * @type {string}
     * @memberof ModelInfoSupportedParameter
     */
    parameter: string;
    /**
     * The parameter type e.g. 'one_of', 'numeric_range', or 'any'.
     * 
     * If the type is 'one_of', then 'allowed_values' will be set, and the value specified must be one of the allowed values. 'one_of' is only compatible with value_type 'string' or 'integer'.
     * 
     * If 'numeric_range', then 'min' and 'max' will be set, then the value specified must adhere to the value_type and must fall within the `[min, max]` range (inclusive).
     * 
     * If 'any' then any value is allowed, as long as it adheres to the value_type.
     * @type {string}
     * @memberof ModelInfoSupportedParameter
     */
    type: string;
    /**
     * The type of value the parameter accepts, e.g. 'string', 'integer', 'float', or 'boolean'.
     * @type {string}
     * @memberof ModelInfoSupportedParameter
     */
    valueType: string;
    /**
     * Whether the parameter is required (true) or optional (false).
     * @type {boolean}
     * @memberof ModelInfoSupportedParameter
     */
    required: boolean;
    /**
     * The allowed parameter values when the type is 'one_of'.
     * @type {Array<ModelInfoSupportedParameterAllowedValuesInner>}
     * @memberof ModelInfoSupportedParameter
     */
    allowedValues?: Array<ModelInfoSupportedParameterAllowedValuesInner>;
    /**
     * The minimum allowed value (inclusive) when the type is 'numeric_range'.
     * @type {number}
     * @memberof ModelInfoSupportedParameter
     */
    min?: number;
    /**
     * The maximum allowed value (inclusive) when the type is 'numeric_range'.
     * @type {number}
     * @memberof ModelInfoSupportedParameter
     */
    max?: number;
    /**
     * 
     * @type {ModelInfoSupportedParameterDefault}
     * @memberof ModelInfoSupportedParameter
     */
    _default?: ModelInfoSupportedParameterDefault;
}

/**
 * Check if a given object implements the ModelInfoSupportedParameter interface.
 */
export function instanceOfModelInfoSupportedParameter(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "parameter" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "valueType" in value;
    isInstance = isInstance && "required" in value;

    return isInstance;
}

export function ModelInfoSupportedParameterFromJSON(json: any): ModelInfoSupportedParameter {
    return ModelInfoSupportedParameterFromJSONTyped(json, false);
}

export function ModelInfoSupportedParameterFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelInfoSupportedParameter {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'parameter': json['parameter'],
        'type': json['type'],
        'valueType': json['value_type'],
        'required': json['required'],
        'allowedValues': !exists(json, 'allowed_values') ? undefined : ((json['allowed_values'] as Array<any>).map(ModelInfoSupportedParameterAllowedValuesInnerFromJSON)),
        'min': !exists(json, 'min') ? undefined : json['min'],
        'max': !exists(json, 'max') ? undefined : json['max'],
        '_default': !exists(json, 'default') ? undefined : ModelInfoSupportedParameterDefaultFromJSON(json['default']),
    };
}

export function ModelInfoSupportedParameterToJSON(value?: ModelInfoSupportedParameter | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'parameter': value.parameter,
        'type': value.type,
        'value_type': value.valueType,
        'required': value.required,
        'allowed_values': value.allowedValues === undefined ? undefined : ((value.allowedValues as Array<any>).map(ModelInfoSupportedParameterAllowedValuesInnerToJSON)),
        'min': value.min,
        'max': value.max,
        'default': ModelInfoSupportedParameterDefaultToJSON(value._default),
    };
}

