/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Inference API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: 2025-01
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Embedding } from './Embedding';
import {
    EmbeddingFromJSON,
    EmbeddingFromJSONTyped,
    EmbeddingToJSON,
} from './Embedding';
import type { EmbeddingsListUsage } from './EmbeddingsListUsage';
import {
    EmbeddingsListUsageFromJSON,
    EmbeddingsListUsageFromJSONTyped,
    EmbeddingsListUsageToJSON,
} from './EmbeddingsListUsage';

/**
 * Embeddings generated for the input.
 * @export
 * @interface EmbeddingsList
 */
export interface EmbeddingsList {
    /**
     * The model used to generate the embeddings
     * @type {string}
     * @memberof EmbeddingsList
     */
    model: string;
    /**
     * Indicates whether the response data contains 'dense' or 'sparse' embeddings.
     * @type {string}
     * @memberof EmbeddingsList
     */
    vectorType: string;
    /**
     * The embeddings generated for the inputs.
     * @type {Array<Embedding>}
     * @memberof EmbeddingsList
     */
    data: Array<Embedding>;
    /**
     * 
     * @type {EmbeddingsListUsage}
     * @memberof EmbeddingsList
     */
    usage: EmbeddingsListUsage;
}

/**
 * Check if a given object implements the EmbeddingsList interface.
 */
export function instanceOfEmbeddingsList(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "model" in value;
    isInstance = isInstance && "vectorType" in value;
    isInstance = isInstance && "data" in value;
    isInstance = isInstance && "usage" in value;

    return isInstance;
}

export function EmbeddingsListFromJSON(json: any): EmbeddingsList {
    return EmbeddingsListFromJSONTyped(json, false);
}

export function EmbeddingsListFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmbeddingsList {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'model': json['model'],
        'vectorType': json['vector_type'],
        'data': ((json['data'] as Array<any>).map(EmbeddingFromJSON)),
        'usage': EmbeddingsListUsageFromJSON(json['usage']),
    };
}

export function EmbeddingsListToJSON(value?: EmbeddingsList | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'model': value.model,
        'vector_type': value.vectorType,
        'data': ((value.data as Array<any>).map(EmbeddingToJSON)),
        'usage': EmbeddingsListUsageToJSON(value.usage),
    };
}

