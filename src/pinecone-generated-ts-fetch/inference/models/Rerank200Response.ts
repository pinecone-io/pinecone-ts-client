/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Inference API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: 2024-10
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RankResult } from './RankResult';
import {
    RankResultFromJSON,
    RankResultFromJSONTyped,
    RankResultToJSON,
} from './RankResult';
import type { Rerank200ResponseUsage } from './Rerank200ResponseUsage';
import {
    Rerank200ResponseUsageFromJSON,
    Rerank200ResponseUsageFromJSONTyped,
    Rerank200ResponseUsageToJSON,
} from './Rerank200ResponseUsage';

/**
 * 
 * @export
 * @interface Rerank200Response
 */
export interface Rerank200Response {
    /**
     * The model used for reranking
     * @type {string}
     * @memberof Rerank200Response
     */
    model: string;
    /**
     * The reranked documents
     * @type {Array<RankResult>}
     * @memberof Rerank200Response
     */
    data: Array<RankResult>;
    /**
     * 
     * @type {Rerank200ResponseUsage}
     * @memberof Rerank200Response
     */
    usage: Rerank200ResponseUsage;
}

/**
 * Check if a given object implements the Rerank200Response interface.
 */
export function instanceOfRerank200Response(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "model" in value;
    isInstance = isInstance && "data" in value;
    isInstance = isInstance && "usage" in value;

    return isInstance;
}

export function Rerank200ResponseFromJSON(json: any): Rerank200Response {
    return Rerank200ResponseFromJSONTyped(json, false);
}

export function Rerank200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): Rerank200Response {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'model': json['model'],
        'data': ((json['data'] as Array<any>).map(RankResultFromJSON)),
        'usage': Rerank200ResponseUsageFromJSON(json['usage']),
    };
}

export function Rerank200ResponseToJSON(value?: Rerank200Response | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'model': value.model,
        'data': ((value.data as Array<any>).map(RankResultToJSON)),
        'usage': Rerank200ResponseUsageToJSON(value.usage),
    };
}

