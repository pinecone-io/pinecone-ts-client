/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Data Plane API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: 2024-10
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ImportListResponse,
  ImportModel,
  RpcStatus,
  StartImportRequest,
  StartImportResponse,
} from '../models/index';
import {
    ImportListResponseFromJSON,
    ImportListResponseToJSON,
    ImportModelFromJSON,
    ImportModelToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
    StartImportRequestFromJSON,
    StartImportRequestToJSON,
    StartImportResponseFromJSON,
    StartImportResponseToJSON,
} from '../models/index';

export interface CancelImportRequest {
    id: string;
}

export interface DescribeImportRequest {
    id: string;
}

export interface ListImportsRequest {
    limit?: number;
    paginationToken?: string;
}

export interface StartImportOperationRequest {
    startImportRequest: StartImportRequest;
}

/**
 * 
 */
export class BulkOperationsApi extends runtime.BaseAPI {

    /**
     * The `cancel_import` operation cancels an import operation if it is not yet finished. It has no effect if the operation is already finished. For guidance and examples, see [Import data](https://docs.pinecone.io/guides/data/import-data). 
     * Cancel an import
     */
    async cancelImportRaw(requestParameters: CancelImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling cancelImport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/bulk/imports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * The `cancel_import` operation cancels an import operation if it is not yet finished. It has no effect if the operation is already finished. For guidance and examples, see [Import data](https://docs.pinecone.io/guides/data/import-data). 
     * Cancel an import
     */
    async cancelImport(requestParameters: CancelImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.cancelImportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `describe_import` operation returns details of a specific import operation. For guidance and examples, see [Import data](https://docs.pinecone.io/guides/data/import-data). 
     * Describe an import
     */
    async describeImportRaw(requestParameters: DescribeImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImportModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling describeImport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/bulk/imports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImportModelFromJSON(jsonValue));
    }

    /**
     * The `describe_import` operation returns details of a specific import operation. For guidance and examples, see [Import data](https://docs.pinecone.io/guides/data/import-data). 
     * Describe an import
     */
    async describeImport(requestParameters: DescribeImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImportModel> {
        const response = await this.describeImportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `list_imports` operation lists all recent and ongoing import operations. For guidance and examples, see [Import data](https://docs.pinecone.io/guides/data/import-data). 
     * List imports
     */
    async listImportsRaw(requestParameters: ListImportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImportListResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.paginationToken !== undefined) {
            queryParameters['paginationToken'] = requestParameters.paginationToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/bulk/imports`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImportListResponseFromJSON(jsonValue));
    }

    /**
     * The `list_imports` operation lists all recent and ongoing import operations. For guidance and examples, see [Import data](https://docs.pinecone.io/guides/data/import-data). 
     * List imports
     */
    async listImports(requestParameters: ListImportsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImportListResponse> {
        const response = await this.listImportsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The `start_import` operation starts an asynchronous import of vectors from object storage into an index. For guidance and examples, see [Import data](https://docs.pinecone.io/guides/data/import-data). 
     * Start import
     */
    async startImportRaw(requestParameters: StartImportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StartImportResponse>> {
        if (requestParameters.startImportRequest === null || requestParameters.startImportRequest === undefined) {
            throw new runtime.RequiredError('startImportRequest','Required parameter requestParameters.startImportRequest was null or undefined when calling startImport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Api-Key"] = this.configuration.apiKey("Api-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/bulk/imports`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StartImportRequestToJSON(requestParameters.startImportRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StartImportResponseFromJSON(jsonValue));
    }

    /**
     * The `start_import` operation starts an asynchronous import of vectors from object storage into an index. For guidance and examples, see [Import data](https://docs.pinecone.io/guides/data/import-data). 
     * Start import
     */
    async startImport(requestParameters: StartImportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StartImportResponse> {
        const response = await this.startImportRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
