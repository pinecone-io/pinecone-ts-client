/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Data Plane API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: unstable
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ImportModel } from './ImportModel';
import {
    ImportModelFromJSON,
    ImportModelFromJSONTyped,
    ImportModelToJSON,
} from './ImportModel';
import type { Pagination } from './Pagination';
import {
    PaginationFromJSON,
    PaginationFromJSONTyped,
    PaginationToJSON,
} from './Pagination';

/**
 * The response for the `list_imports` operation.
 * @export
 * @interface ListImportsResponse
 */
export interface ListImportsResponse {
    /**
     * 
     * @type {Array<ImportModel>}
     * @memberof ListImportsResponse
     */
    data?: Array<ImportModel>;
    /**
     * 
     * @type {Pagination}
     * @memberof ListImportsResponse
     */
    pagination?: Pagination;
}

/**
 * Check if a given object implements the ListImportsResponse interface.
 */
export function instanceOfListImportsResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ListImportsResponseFromJSON(json: any): ListImportsResponse {
    return ListImportsResponseFromJSONTyped(json, false);
}

export function ListImportsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ListImportsResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'data': !exists(json, 'data') ? undefined : ((json['data'] as Array<any>).map(ImportModelFromJSON)),
        'pagination': !exists(json, 'pagination') ? undefined : PaginationFromJSON(json['pagination']),
    };
}

export function ListImportsResponseToJSON(value?: ListImportsResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'data': value.data === undefined ? undefined : ((value.data as Array<any>).map(ImportModelToJSON)),
        'pagination': PaginationToJSON(value.pagination),
    };
}

