/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Data Plane API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: 2025-01
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Parameters for reranking the initial search results.
 * @export
 * @interface SearchRecordsRequestRerank
 */
export interface SearchRecordsRequestRerank {
    /**
     * The name of the [reranking model](https://docs.pinecone.io/guides/inference/understanding-inference#reranking-models) to use.
     * @type {string}
     * @memberof SearchRecordsRequestRerank
     */
    model: string;
    /**
     * The fields to use for reranking.
     * @type {Array<string>}
     * @memberof SearchRecordsRequestRerank
     */
    rankFields: Array<string>;
    /**
     * The number of top results to return after reranking. Defaults to top_k.
     * @type {number}
     * @memberof SearchRecordsRequestRerank
     */
    topN?: number;
    /**
     * Additional model-specific parameters. Refer to the [model guide](https://docs.pinecone.io/guides/inference/understanding-inference#reranking-models) for available model parameters.
     * @type {{ [key: string]: any; }}
     * @memberof SearchRecordsRequestRerank
     */
    parameters?: { [key: string]: any; };
}

/**
 * Check if a given object implements the SearchRecordsRequestRerank interface.
 */
export function instanceOfSearchRecordsRequestRerank(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "model" in value;
    isInstance = isInstance && "rankFields" in value;

    return isInstance;
}

export function SearchRecordsRequestRerankFromJSON(json: any): SearchRecordsRequestRerank {
    return SearchRecordsRequestRerankFromJSONTyped(json, false);
}

export function SearchRecordsRequestRerankFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchRecordsRequestRerank {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'model': json['model'],
        'rankFields': json['rank_fields'],
        'topN': !exists(json, 'top_n') ? undefined : json['top_n'],
        'parameters': !exists(json, 'parameters') ? undefined : json['parameters'],
    };
}

export function SearchRecordsRequestRerankToJSON(value?: SearchRecordsRequestRerank | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'model': value.model,
        'rank_fields': value.rankFields,
        'top_n': value.topN,
        'parameters': value.parameters,
    };
}

