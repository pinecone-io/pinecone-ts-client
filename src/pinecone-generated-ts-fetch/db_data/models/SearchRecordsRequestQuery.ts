/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Data Plane API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: 2025-04
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SearchRecordsVector } from './SearchRecordsVector';
import {
    SearchRecordsVectorFromJSON,
    SearchRecordsVectorFromJSONTyped,
    SearchRecordsVectorToJSON,
} from './SearchRecordsVector';

/**
 * .
 * @export
 * @interface SearchRecordsRequestQuery
 */
export interface SearchRecordsRequestQuery {
    /**
     * The number of similar records to return.
     * @type {number}
     * @memberof SearchRecordsRequestQuery
     */
    topK: number;
    /**
     * The filter to apply. You can use vector metadata to limit your search. See [Understanding metadata](https://docs.pinecone.io/guides/index-data/indexing-overview#metadata).
     * @type {object}
     * @memberof SearchRecordsRequestQuery
     */
    filter?: object;
    /**
     * 
     * @type {object}
     * @memberof SearchRecordsRequestQuery
     */
    inputs?: object;
    /**
     * 
     * @type {SearchRecordsVector}
     * @memberof SearchRecordsRequestQuery
     */
    vector?: SearchRecordsVector;
    /**
     * The unique ID of the vector to be used as a query vector.
     * @type {string}
     * @memberof SearchRecordsRequestQuery
     */
    id?: string;
}

/**
 * Check if a given object implements the SearchRecordsRequestQuery interface.
 */
export function instanceOfSearchRecordsRequestQuery(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "topK" in value;

    return isInstance;
}

export function SearchRecordsRequestQueryFromJSON(json: any): SearchRecordsRequestQuery {
    return SearchRecordsRequestQueryFromJSONTyped(json, false);
}

export function SearchRecordsRequestQueryFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchRecordsRequestQuery {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'topK': json['top_k'],
        'filter': !exists(json, 'filter') ? undefined : json['filter'],
        'inputs': !exists(json, 'inputs') ? undefined : json['inputs'],
        'vector': !exists(json, 'vector') ? undefined : SearchRecordsVectorFromJSON(json['vector']),
        'id': !exists(json, 'id') ? undefined : json['id'],
    };
}

export function SearchRecordsRequestQueryToJSON(value?: SearchRecordsRequestQuery | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'top_k': value.topK,
        'filter': value.filter,
        'inputs': value.inputs,
        'vector': SearchRecordsVectorToJSON(value.vector),
        'id': value.id,
    };
}

