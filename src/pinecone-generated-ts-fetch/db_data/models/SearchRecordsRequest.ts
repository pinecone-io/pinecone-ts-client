/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Data Plane API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: unstable
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SearchRecordsRequestQuery } from './SearchRecordsRequestQuery';
import {
    SearchRecordsRequestQueryFromJSON,
    SearchRecordsRequestQueryFromJSONTyped,
    SearchRecordsRequestQueryToJSON,
} from './SearchRecordsRequestQuery';
import type { SearchRecordsRequestRerank } from './SearchRecordsRequestRerank';
import {
    SearchRecordsRequestRerankFromJSON,
    SearchRecordsRequestRerankFromJSONTyped,
    SearchRecordsRequestRerankToJSON,
} from './SearchRecordsRequestRerank';

/**
 * A search request for records in a specific namespace.
 * @export
 * @interface SearchRecordsRequest
 */
export interface SearchRecordsRequest {
    /**
     * 
     * @type {SearchRecordsRequestQuery}
     * @memberof SearchRecordsRequest
     */
    query: SearchRecordsRequestQuery;
    /**
     * The fields to return in the search results.
     * @type {Array<string>}
     * @memberof SearchRecordsRequest
     */
    fields?: Array<string>;
    /**
     * 
     * @type {SearchRecordsRequestRerank}
     * @memberof SearchRecordsRequest
     */
    rerank?: SearchRecordsRequestRerank;
}

/**
 * Check if a given object implements the SearchRecordsRequest interface.
 */
export function instanceOfSearchRecordsRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "query" in value;

    return isInstance;
}

export function SearchRecordsRequestFromJSON(json: any): SearchRecordsRequest {
    return SearchRecordsRequestFromJSONTyped(json, false);
}

export function SearchRecordsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchRecordsRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'query': SearchRecordsRequestQueryFromJSON(json['query']),
        'fields': !exists(json, 'fields') ? undefined : json['fields'],
        'rerank': !exists(json, 'rerank') ? undefined : SearchRecordsRequestRerankFromJSON(json['rerank']),
    };
}

export function SearchRecordsRequestToJSON(value?: SearchRecordsRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'query': SearchRecordsRequestQueryToJSON(value.query),
        'fields': value.fields,
        'rerank': SearchRecordsRequestRerankToJSON(value.rerank),
    };
}

