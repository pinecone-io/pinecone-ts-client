/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Data Plane API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: 2025-04
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SearchRecordsVector
 */
export interface SearchRecordsVector {
    /**
     * This is the vector data included in the request.
     * @type {Array<number>}
     * @memberof SearchRecordsVector
     */
    values?: Array<number>;
    /**
     * The sparse embedding values.
     * @type {Array<number>}
     * @memberof SearchRecordsVector
     */
    sparseValues?: Array<number>;
    /**
     * The sparse embedding indices.
     * @type {Array<number>}
     * @memberof SearchRecordsVector
     */
    sparseIndices?: Array<number>;
}

/**
 * Check if a given object implements the SearchRecordsVector interface.
 */
export function instanceOfSearchRecordsVector(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SearchRecordsVectorFromJSON(json: any): SearchRecordsVector {
    return SearchRecordsVectorFromJSONTyped(json, false);
}

export function SearchRecordsVectorFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchRecordsVector {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'values': !exists(json, 'values') ? undefined : json['values'],
        'sparseValues': !exists(json, 'sparse_values') ? undefined : json['sparse_values'],
        'sparseIndices': !exists(json, 'sparse_indices') ? undefined : json['sparse_indices'],
    };
}

export function SearchRecordsVectorToJSON(value?: SearchRecordsVector | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'values': value.values,
        'sparse_values': value.sparseValues,
        'sparse_indices': value.sparseIndices,
    };
}

