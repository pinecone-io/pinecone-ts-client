/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Data Plane API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: 2024-10
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The model for an import operation.
 * @export
 * @interface ImportModel
 */
export interface ImportModel {
    /**
     * Unique identifier for the import operation.
     * @type {string}
     * @memberof ImportModel
     */
    id?: string;
    /**
     * The URI from where the data is imported.
     * @type {string}
     * @memberof ImportModel
     */
    uri?: string;
    /**
     * The status of the operation.
     * @type {string}
     * @memberof ImportModel
     */
    status?: ImportModelStatusEnum;
    /**
     * The start time of the import operation.
     * @type {Date}
     * @memberof ImportModel
     */
    createdAt?: Date;
    /**
     * The end time of the import operation.
     * @type {Date}
     * @memberof ImportModel
     */
    finishedAt?: Date;
    /**
     * The progress made by the operation, as a percentage.
     * @type {number}
     * @memberof ImportModel
     */
    percentComplete?: number;
    /**
     * The number of records successfully imported.
     * @type {number}
     * @memberof ImportModel
     */
    recordsImported?: number;
    /**
     * The error message if the import process failed.
     * @type {string}
     * @memberof ImportModel
     */
    error?: string;
}


/**
 * @export
 */
export const ImportModelStatusEnum = {
    Pending: 'Pending',
    InProgress: 'InProgress',
    Failed: 'Failed',
    Completed: 'Completed',
    Cancelled: 'Cancelled'
} as const;
export type ImportModelStatusEnum = typeof ImportModelStatusEnum[keyof typeof ImportModelStatusEnum];


/**
 * Check if a given object implements the ImportModel interface.
 */
export function instanceOfImportModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ImportModelFromJSON(json: any): ImportModel {
    return ImportModelFromJSONTyped(json, false);
}

export function ImportModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImportModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'uri': !exists(json, 'uri') ? undefined : json['uri'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'finishedAt': !exists(json, 'finishedAt') ? undefined : (new Date(json['finishedAt'])),
        'percentComplete': !exists(json, 'percentComplete') ? undefined : json['percentComplete'],
        'recordsImported': !exists(json, 'recordsImported') ? undefined : json['recordsImported'],
        'error': !exists(json, 'error') ? undefined : json['error'],
    };
}

export function ImportModelToJSON(value?: ImportModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'uri': value.uri,
        'status': value.status,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'finishedAt': value.finishedAt === undefined ? undefined : (value.finishedAt.toISOString()),
        'percentComplete': value.percentComplete,
        'recordsImported': value.recordsImported,
        'error': value.error,
    };
}

