/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Data Plane API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: 2025-04
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SearchRecordsResponseResult } from './SearchRecordsResponseResult';
import {
    SearchRecordsResponseResultFromJSON,
    SearchRecordsResponseResultFromJSONTyped,
    SearchRecordsResponseResultToJSON,
} from './SearchRecordsResponseResult';
import type { SearchUsage } from './SearchUsage';
import {
    SearchUsageFromJSON,
    SearchUsageFromJSONTyped,
    SearchUsageToJSON,
} from './SearchUsage';

/**
 * The records search response.
 * @export
 * @interface SearchRecordsResponse
 */
export interface SearchRecordsResponse {
    /**
     * 
     * @type {SearchRecordsResponseResult}
     * @memberof SearchRecordsResponse
     */
    result: SearchRecordsResponseResult;
    /**
     * 
     * @type {SearchUsage}
     * @memberof SearchRecordsResponse
     */
    usage: SearchUsage;
}

/**
 * Check if a given object implements the SearchRecordsResponse interface.
 */
export function instanceOfSearchRecordsResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "result" in value;
    isInstance = isInstance && "usage" in value;

    return isInstance;
}

export function SearchRecordsResponseFromJSON(json: any): SearchRecordsResponse {
    return SearchRecordsResponseFromJSONTyped(json, false);
}

export function SearchRecordsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchRecordsResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'result': SearchRecordsResponseResultFromJSON(json['result']),
        'usage': SearchUsageFromJSON(json['usage']),
    };
}

export function SearchRecordsResponseToJSON(value?: SearchRecordsResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'result': SearchRecordsResponseResultToJSON(value.result),
        'usage': SearchUsageToJSON(value.usage),
    };
}

