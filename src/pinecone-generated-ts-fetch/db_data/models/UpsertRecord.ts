/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Data Plane API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: 2025-01
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UpsertRecordEmbed } from './UpsertRecordEmbed';
import {
    UpsertRecordEmbedFromJSON,
    UpsertRecordEmbedFromJSONTyped,
    UpsertRecordEmbedToJSON,
} from './UpsertRecordEmbed';
import type { Vector } from './Vector';
import {
    VectorFromJSON,
    VectorFromJSONTyped,
    VectorToJSON,
} from './Vector';

/**
 * The request for the `upsert` operation.
 * @export
 * @interface UpsertRecord
 */
export interface UpsertRecord {
    /**
     * The unique ID of the record to upsert.
     * @type {string}
     * @memberof UpsertRecord
     */
    id: string;
    /**
     * 
     * @type {Vector}
     * @memberof UpsertRecord
     */
    vector?: Vector;
    /**
     * 
     * @type {UpsertRecordEmbed}
     * @memberof UpsertRecord
     */
    embed?: UpsertRecordEmbed;
}

/**
 * Check if a given object implements the UpsertRecord interface.
 */
export function instanceOfUpsertRecord(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function UpsertRecordFromJSON(json: any): UpsertRecord {
    return UpsertRecordFromJSONTyped(json, false);
}

export function UpsertRecordFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpsertRecord {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['_id'],
        'vector': !exists(json, '_vector') ? undefined : VectorFromJSON(json['_vector']),
        'embed': !exists(json, '_embed') ? undefined : UpsertRecordEmbedFromJSON(json['_embed']),
    };
}

export function UpsertRecordToJSON(value?: UpsertRecord | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        '_id': value.id,
        '_vector': VectorToJSON(value.vector),
        '_embed': UpsertRecordEmbedToJSON(value.embed),
    };
}

