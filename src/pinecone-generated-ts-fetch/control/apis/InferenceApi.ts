/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Control Plane API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: 2024-07
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  EmbedRequest,
  EmbeddingsList,
  ErrorResponse,
} from '../models/index';
import {
  EmbedRequestFromJSON,
  EmbedRequestToJSON,
  EmbeddingsListFromJSON,
  EmbeddingsListToJSON,
  ErrorResponseFromJSON,
  ErrorResponseToJSON,
} from '../models/index';
import {ToStandardResponse} from "../../../utils";

export interface EmbedOperationRequest {
  embedRequest?: EmbedRequest;
}

/**
 *
 */
export class InferenceApi extends runtime.BaseAPI {
  /**
   * Generate embeddings for input data
   * Embed data
   */
  async embedRaw(
    requestParameters: EmbedOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<EmbeddingsList>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Api-Key'] = this.configuration.apiKey('Api-Key'); // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/embed`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: EmbedRequestToJSON(requestParameters.embedRequest),
      },
      initOverrides
    );

    const standardResponse = await ToStandardResponse(response);

    return new runtime.JSONApiResponse(standardResponse, (jsonValue) =>
      EmbeddingsListFromJSON(jsonValue)
    );
  }

  /**
   * Generate embeddings for input data
   * Embed data
   */
  async embed(
    requestParameters: EmbedOperationRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<EmbeddingsList> {
    const response = await this.embedRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
