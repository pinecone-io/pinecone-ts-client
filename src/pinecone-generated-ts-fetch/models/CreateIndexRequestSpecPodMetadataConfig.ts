/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Control Plane API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Configuration for the behavior of Pinecone's internal metadata index. By default, all metadata is indexed; when `metadata_config` is present, only specified metadata fields are indexed. These configurations are only valid for use with pod-based indexes.
 * @export
 * @interface CreateIndexRequestSpecPodMetadataConfig
 */
export interface CreateIndexRequestSpecPodMetadataConfig {
    /**
     * By default, all metadata is indexed; to change this behavior, use this property to specify an array of metadata fields which should be indexed.
     * @type {Array<string>}
     * @memberof CreateIndexRequestSpecPodMetadataConfig
     */
    indexed?: Array<string>;
}

/**
 * Check if a given object implements the CreateIndexRequestSpecPodMetadataConfig interface.
 */
export function instanceOfCreateIndexRequestSpecPodMetadataConfig(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CreateIndexRequestSpecPodMetadataConfigFromJSON(json: any): CreateIndexRequestSpecPodMetadataConfig {
    return CreateIndexRequestSpecPodMetadataConfigFromJSONTyped(json, false);
}

export function CreateIndexRequestSpecPodMetadataConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateIndexRequestSpecPodMetadataConfig {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'indexed': !exists(json, 'indexed') ? undefined : json['indexed'],
    };
}

export function CreateIndexRequestSpecPodMetadataConfigToJSON(value?: CreateIndexRequestSpecPodMetadataConfig | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'indexed': value.indexed,
    };
}

