/* tslint:disable */
/* eslint-disable */
/**
 * Pineonce.io Public API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CreateIndexRequestSpec } from './CreateIndexRequestSpec';
import {
    CreateIndexRequestSpecFromJSON,
    CreateIndexRequestSpecFromJSONTyped,
    CreateIndexRequestSpecToJSON,
} from './CreateIndexRequestSpec';

/**
 * The configuration needed to create a Pinecone index.
 * @export
 * @interface CreateIndexRequest
 */
export interface CreateIndexRequest {
    /**
     * The name of the index. The maximum length is 45 characters.  It may contain lowercase alphanumeric characters or hyphens,  and must not begin or end with a hyphen.
     * @type {string}
     * @memberof CreateIndexRequest
     */
    name: string;
    /**
     * The dimensions of the vectors to be inserted in the index
     * @type {number}
     * @memberof CreateIndexRequest
     */
    dimension: number;
    /**
     * The distance metric to be used for similarity search. You can use 'euclidean', 'cosine', or 'dotproduct'.
     * @type {string}
     * @memberof CreateIndexRequest
     */
    metric: CreateIndexRequestMetricEnum;
    /**
     * 
     * @type {CreateIndexRequestSpec}
     * @memberof CreateIndexRequest
     */
    spec: CreateIndexRequestSpec | null;
}


/**
 * @export
 */
export const CreateIndexRequestMetricEnum = {
    Cosine: 'cosine',
    Euclidean: 'euclidean',
    Dotproduct: 'dotproduct'
} as const;
export type CreateIndexRequestMetricEnum = typeof CreateIndexRequestMetricEnum[keyof typeof CreateIndexRequestMetricEnum];


/**
 * Check if a given object implements the CreateIndexRequest interface.
 */
export function instanceOfCreateIndexRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "dimension" in value;
    isInstance = isInstance && "metric" in value;
    isInstance = isInstance && "spec" in value;

    return isInstance;
}

export function CreateIndexRequestFromJSON(json: any): CreateIndexRequest {
    return CreateIndexRequestFromJSONTyped(json, false);
}

export function CreateIndexRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateIndexRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'dimension': json['dimension'],
        'metric': json['metric'],
        'spec': CreateIndexRequestSpecFromJSON(json['spec']),
    };
}

export function CreateIndexRequestToJSON(value?: CreateIndexRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'dimension': value.dimension,
        'metric': value.metric,
        'spec': CreateIndexRequestSpecToJSON(value.spec),
    };
}

