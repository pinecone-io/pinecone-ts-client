/* tslint:disable */
/* eslint-disable */
/**
 * Pineonce.io Public API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The CollectionModel describes the configuration and status of a Pinecone collection.
 * @export
 * @interface CollectionModel
 */
export interface CollectionModel {
    /**
     * 
     * @type {string}
     * @memberof CollectionModel
     */
    name: string;
    /**
     * The size of the collection in bytes.
     * @type {number}
     * @memberof CollectionModel
     */
    size: number;
    /**
     * The status of the collection.
     * @type {string}
     * @memberof CollectionModel
     */
    status: CollectionModelStatusEnum;
    /**
     * The dimension of the vectors stored in each record held in the collection
     * @type {number}
     * @memberof CollectionModel
     */
    dimension: number;
    /**
     * The number of records stored in the collection
     * @type {number}
     * @memberof CollectionModel
     */
    recordCount: number;
    /**
     * The environment where the collection is hosted.
     * @type {string}
     * @memberof CollectionModel
     */
    environment?: string;
}


/**
 * @export
 */
export const CollectionModelStatusEnum = {
    Initializing: 'Initializing',
    Ready: 'Ready',
    Terminating: 'Terminating'
} as const;
export type CollectionModelStatusEnum = typeof CollectionModelStatusEnum[keyof typeof CollectionModelStatusEnum];


/**
 * Check if a given object implements the CollectionModel interface.
 */
export function instanceOfCollectionModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "size" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "dimension" in value;
    isInstance = isInstance && "recordCount" in value;

    return isInstance;
}

export function CollectionModelFromJSON(json: any): CollectionModel {
    return CollectionModelFromJSONTyped(json, false);
}

export function CollectionModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): CollectionModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'size': json['size'],
        'status': json['status'],
        'dimension': json['dimension'],
        'recordCount': json['record_count'],
        'environment': !exists(json, 'environment') ? undefined : json['environment'],
    };
}

export function CollectionModelToJSON(value?: CollectionModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'size': value.size,
        'status': value.status,
        'dimension': value.dimension,
        'record_count': value.recordCount,
        'environment': value.environment,
    };
}

